class TrieNode(object):
    def __init__(self):
        self.children = {}
        self.isword = False  
    
class Trie(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        curr_node = self.root
        for char in word:
            try:
                curr_node = curr_node.children[char]
            except:
                curr_node.children[char] = TrieNode()
                curr_node = curr_node.children[char]
        curr_node.isword = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        curr_node = self.root
        for char in word:
            try:
                curr_node = curr_node.children[char]
            except:
                return False
        if curr_node.isword:
            return True
        return False
        

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        curr_node = self.root
        for char in prefix:
            try:
                curr_node = curr_node.children[char]
            except:
                return False
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
