class Solution(object):
    def possibleBipartition(self, N, dislikes):
        """
        :type N: int
        :type dislikes: List[List[int]]
        :rtype: bool
        """
        if not dislikes:
            return True
        graph = collections.defaultdict(list)
        for i,j in dislikes:
            graph[i-1].append(j-1)
            graph[j-1].append(i-1)
        
        colors = [0]*N #for both color-coding and visited
        for i in range(0, N): #for each component
            if colors[i] == 0:
                queue = deque([i])
                colors[i] = 1     
                while queue:
                    curr_node = queue.popleft()
                    for bad_pair in graph[curr_node]:
                        if colors[bad_pair] == 0:
                            colors[bad_pair] = -colors[curr_node]
                            queue.append(bad_pair)
                        elif colors[bad_pair] == colors[curr_node]:
                            return False
        return True
    
    
